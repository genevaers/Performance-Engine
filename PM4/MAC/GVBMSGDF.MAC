         Macro
&LABEL   GVBMSGDF &ID,&MSG,&TYPE=
.*
.* (C) COPYRIGHT IBM CORPORATION 2008.
.*     Copyright Contributors to the GenevaERS Project.
.* SPDX-License-Identifier: Apache-2.0
.*
.**********************************************************************
.*
.*  Licensed under the Apache License, Version 2.0 (the "License");
.*  you may not use this file except in compliance with the License.
.*  You may obtain a copy of the License at
.*
.*     http://www.apache.org/licenses/LICENSE-2.0
.*
.*  Unless required by applicable law or agreed to in writing, software
.*  distributed under the License is distributed on an "AS IS" BASIS,
.*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
.*  or implied.
.*  See the License for the specific language governing permissions
.*  and limitations under the License.
.*
.**********************************************************************
.*                                                                    *
.* This macro generates the message definition module.                *
.*                                                                    *
.* Dependencies:                                                      *
.*                                                                    *
.* Message build module GVBUTMSG is dependent on the order of the     *
.* constants at the beginning of the message definition module, and   *
.* on the format of the message directory produced by macro GVBMSGDF. *
.* Any changes made to macro GVBMSGDF will require a corresponding    *
.* change to GVBUTMSG (or at least a re-assembly).                    *
.*                                                                    *
.* Forms of Syntax:                                                   *
.*                                                                    *
.*   1  LABEL GVBMSGDF  PREFIX,TYPE=START                             *
.*   2        GVBMSGDF  ID,'This is Message Text &&1',TYPE=?          *
.*   3        GVBMSGDF  TYPE=END                                      *
.*   4        GVBMSGDF  TYPE=DSECT                                    *
.*                                                                    *
.* Other Keywords:                                                    *
.*                                                                    *
.*   PARAMETER RECEIVED = PREFIX                                      *
.*   HOW PASSED: Required positional keyword                          *
.*   VALUE = The characters 'XXXX' which is the message               *
.*           prefix (usually GVB).                                    *
.*                                                                    *
.*   PARAMETER RECEIVED = ID                                          *
.*   HOW PASSED: Optional positional keyword                          *
.*   VALUE = The message number to be given to the message.           *
.*           The number may range from 0 to 99999.                    *
.*                                                                    *
.*   PARAMETER RECEIVED = MSG                                         *
.*   HOW PASSED: Optional positional keyword                          *
.*   VALUE = The content of the message.  Parameters for              *
.*           substitution are identified in the text of the           *
.*           message by the 3-character sequence  &&N  where          *
.*           N  has a value from 1 to 9.                              *
.*                                                                    *
.*   PARAMETER RECEIVED = TYPE                                        *
.*   HOW PASSED: Required keyword                                     *
.*   VALUE = I   -  Information               <<()                    *
.*           N   -  Notice                      ()                    *
.*           W   -  Warning                     ()                    *
.*           E   -  Error                       () Valid with         *
.*           S   -  Severe                      () FORMAT 2 only      *
.*           C   -  Critical                    ()                    *
.*           U   -  Unrecoverable             <<()                    *
.*       OR                                                           *
.*           START which signifies the        <<() Valid with         *
.*           beginning of the message module  <<() FORMAT 1 ONLY      *
.*       OR                                                           *
.*           END which signifies the end of   <<() Valid with         *
.*           the message module               <<() FORMAT 3 ONLY      *
.*       OR                                                           *
.*           DSECT which indicates that a     <<() Valid with         *
.*           DSECT for the message definition   () FORMAT 4 ONLY      *
.*           load module is to be generated   <<()                    *
.*                                                                    *
.**********************************************************************
.*
&Limit        SetA 99999           Maximun Message Number
&No_of_Digits SetA K'&Limit        Number of Digits in Message ID
.*
         GblA  &COUNT,&I,&FOLD
.*                                                                    *
.*              COUNT = NO. OF MESSAGES IN A GROUP                    *
.*              I     = TOTAL NUMBER OF MSG ENTRIES IN TABLE OF       *
.*                      MESSAGE ADDRESSES                             *
.*              FOLD  = Fold messages to upper case                   *
.*                                                                    *
         GblA  &BINID(100),&HIGH
.*                                                                    *
.*              BINID  = 100 POSSIBLE ENTRIES IN MESSAGE ADDRESS TABLE*
.*              HIGH   = LAST MSG NBR PROCESSED                       *
.*                                                                    *
         GblC  &MSGDEF,&SAVEID,&FIRST
.*                                                                    *
.*              MSGDEF = CHARS TO PREFIX MESSAGES WITH                *
.*              SAVEID = MSG NBR FOR WHEN TYPE END IS ENCOUNTERED     *
.*              FIRST  = FIRST MSG IN TABLE - BYPASSES MSG ID 0       *
.*                                                                    *
         GblC  &DISP(100)
.*                                                                    *
.*              DISP  = ADDRESS OF EVERY 10TH MESSAGE                 *
.*                                                                    *
         LclA  &WORK,&SIZEID,&SIZEMSG
.*                                                                    *
.*             WORK  =  BINARY VALUE OF CURRENT MSG ID                *
.*             SIZEID = CALCULATE LENGTH OF THE PREFIX                *
.*             SIZEMSG = LENGTH OF INPUT TEXT WITH QUOTES             *
.*                                                                    *
         LclB &FLG(1),&ERR(9)
.*                                                                    *
.*              FLG(1)  -  TYPE IS VALID: I,N,W,E,S,C,U               *
.*              ERR(1)  -  TYPE IS INVALID                            *
.*              ERR(2)  -  START OMITTED OR END HAS BEEN ENCOUNTERED  *
.*              ERR(3)  -  MSG ID IS OUT OF ORDER                     *
.*              ERR(4)  -  MSG ID IS NOT VALID                        *
.*              ERR(5)  -  MSG ID too small                           *
.*              ERR(6)  -  MSG ID too large                           *
.*              ERR(7)  -  MSG TBL CSect NAME CONFLICTS WITH          *
.*                         PREFIX-ID                                  *
.*                      NOTE: ONE OF THE FOLLOWING CONDITIONS         *
.*                            OCCURED:                                *
.*                         -  &LABEL OMITTED                          *
.*                         -  &ID PARM OMITTED                        *
.*              ERR(8)  -  TYPE=END NOT ACCEPTED; TYPE=START          *
.*                         OMITTED OR INVALID                         *
.*              ERR(9)  - TEXT TOO BIG (>246)                         *
.*                                                                    *
.*                                                                    *
         LclC  &HIGHC
.*                                                                    *
.*              HIGHC   -  CONVERT HIGHEST ID BACK TO CHARACTER       *
.*                                                                    *
.**********************************************************************
.*                                                                    *
.*        VALIDATE THE TYPE PARAMETER                                 *
.*                                                                    *
.*                                                                    *
&FLG(1)  SetB  (('&TYPE' EQ 'I') OR ('&TYPE' EQ 'W') OR ('&TYPE' EQ 'E'+
               ) OR ('&TYPE' EQ 'S') OR ('&TYPE' EQ 'C') OR ('&TYPE' EQ+
               'U') OR ('&TYPE' EQ 'N'))
         AIf   (&FLG(1)).TEXT            VALID TYPE PARAMETER
         AIf   ('&TYPE' EQ 'START').STRT TYPE = START
         AIf   ('&TYPE' EQ 'END').END1   TYPE = END
         AIf   ('&TYPE' EQ 'DSECT').strt TYPE = DSECT - go to start
&ERR(1)  SetB  1                         INVALID TYPE FIELD
         AGo  .NOTES
.*                                                                    *
.*                                                                    *
.*        PROCESS TYPE = START                                        *
.*                                                                    *
.*                                                                    *
.STRT    ANOp
.*     NOTE: ANY CHANGES TO THE FORMAT OF THE FOLLOWING CONSTANTS     *
.*           REQUIRE A CORRESPONDING CHANGE TO THE TYPE=DSECT         *
.*           CONSTANT FORMAT                                          *
         AIf   ('&TYPE' EQ 'DSECT').dsect  Generate a DSECT
&LABEL   CSect
&LABEL   RMode ANY                      Set residency and
&LABEL   AMode 31                          addressing modes
         AGo   .skipdsect
.dsect   ANOp
&LABEL   DSect
.skipdsect ANOp
MDSBEGIN DC    F'0'                     Ensure correct offset
         DC    AL1(EYEEND)              Length of eye catcher
EYE      DC    CL8'&LABEL '             CSect Name
         DC    CL8'&SYSPARM '           PTF Level
         DC    CL8'&SYSDATC'            Date
         DC    CL8'&SYSTIME'            Time
EYEEND   EQU   *-EYE
         AIf   ('&TYPE' EQ 'DSECT').strt1 skip this test for DSECT
.*                                      INSURE LABEL AND ID           *
.*                                      ARE SPECIFIED                 *
         AIf  (('&LABEL' NE '') AND ('&ID' NE '')).STRT1
&ERR(7)  SetB 1                        LABEL AND/OR ID
.*                                      ARE/IS NOT SPECIFIED          *
         AGo  .NOTES
.STRT1   ANOp
PutFirst LoCtr
.*                                                                    *
.*  *********    CONTINUE PROCESSING    *********                     *
.*                                                                    *
&I       SetA  1              NUMBER OF ENTRIES IN MSG ADDR TABLE
&COUNT   SetA  0              NUMBER OF MSGS PROCESSED IN A GROUP
&MSGDEF  SetC  '&ID'          INDICATE START ISSUED
&SIZEID  SetA  K'&ID          LENGTH OF PREFIX
&SIZEID  SetA  &SIZEID+3      Add allowance for '** '
MDSPRFLN DC    AL1(&SIZEID)   PREFIX LENGTH
mdsprtxt dc    C'** &MSGDEF'  PREFIX FOR MESSAGES
MDSDIGITS equ  &No_of_Digits.
         AIf   ('&TYPE' EQ 'DSECT').dsect2 Generate rest of DSECT
         mexit ,
.*                                                                    *
.*                                                                    *
.*        PROCESS TYPE = I,N,W,E,S,C,U                                *
.*                                                                    *
.*                                                                    *
.TEXT    ANOp
&ERR(2)  SetB  ('&MSGDEF'  EQ '')       START WAS NOT SPECIFIED
.*                                                                    *
.*        CHECK THAT MESSAGE ID IS VALID                              *
.*                                                                    *
&ERR(4)  SetB (T'&ID  NE 'N')
.*                                                                    *
.*                                                                    *
         AIf   ((&ERR(4)) OR (&ERR(2))).NOTES
.*                                      INVALID MSG ID                *
.*                                             OR                     *
.*                                      TYPE = START OMITTED OR       *
.*                                      TYPE = END HAS BEEN ENCOUNTERED
.*                                                                    *
.*       THIS MESSAGE ID MUST BE HIGHER THAN LAST MESSAGE ID          *
.*       MESSAGE IDS MUST BE IN ASCENDING ORDER                       *
.*                                                                    *
&SIZEMSG SetA  K'&MSG                   GET SIZE OF TEXT
&MAXTEXT SetA  255-&sizeid-&No_of_Digits-1
         AIf   ('&SIZEMSG' LE '&maxtext').TEXT4A IS IT GOOD
&ERR(9)  SetB  1                        SET ERROR BIT
         AGo   .NOTES                   PUT OUT ERROR MSG
.TEXT4A  ANOp                           END OF MSG CHECK
&WORK    SetA  &ID                      CONVERT ID TO BINARY
&ERR(3)  SetB  ('&WORK' LT '&HIGH')     MSG ID IS OUT OF SEQUENCE
         AIf   (&ERR(3)).NOTES          DO NOT GENERATE MESSAGE
&ERR(5)  SetB  ('&WORK' LT '0')         Id too small ?
&ERR(6)  SetB  ('&WORK' GT '&Limit')    Id too large ?
         AIf   (&ERR(5) OR &ERR(6)).NOTES    DO NOT GENERATE MESSAGE
&HIGH    SetA  &ID                      CAPTURE THIS MSG ID
&SAVEID  SetC  '&ID'                    SAVE ID FOR END PROCESSING
         AIf   (('&WORK' EQ '0') OR ('&FIRST' NE '')).TEXT4
&FIRST   SetC  '&ID'                    FIRST MESSAGE IN MODULE
.TEXT4   ANOp
         AIf   ('&WORK' EQ '0').TEXT3   DO NOT INCLUDE MSG ID 0
         AIf   ('&COUNT' GT '0').TEXT2  MUST PROCESS 10 MESSAGES
.*                                                                    *
.*                                                                    *
.*       SAVE INFORMATION FOR IN TABLE OF MESSAGE ADDRESSES           *
.*                                                                    *
.*                                                                    *
&BINID(&I) SetA &ID                     CONVERT ID TO BINARY AND SAVE
&DISP(&I)  SetC '&ID'                   DISPLACEMENT OF MSG IN CSect
&I         SetA &I+1                    NBR OF ADDR ENTRIES TO PROCESS
&COUNT     SetA 10                      NBR OF MSG IDS TO PROCESS
.*                                                                    *
.*       CREATE MESSAGE ENTRY                                         *
.*                                                                    *
.TEXT2   ANOp
&COUNT   SetA  &COUNT-1                 CONTROL FOR TABLE ENTRIES
.TEXT3   ANOp
         AIf   ('&WORK' NE '0').TEXT5   DO NOT INCLUDE MSG ID 0
putsecond loctr ,
MsgFirst equ   msg&id                   set equate to locate id 0
.text5   ANOp
MSG&ID   DC    AL4(&WORK)               ID
         DC    AL1(EL&ID)               Element Length
         DC    AL1(ML&ID)               Length
.* this code here makes sure that the no of digits in the message
.* prefix is the same as the &No_of_Digits set above
.*
.* If &ID is too small, we concatenate the correct number of 0's
.* and if it is too big, we just take the trailing digits
.*
&count_digits  SetA k'&id
         AIf (&count_digits gt &No_of_Digits).toobig
         AIf (&count_digits lt &No_of_Digits).toosmall
&outid   SetC  '&id'                    Just right
         AGo   .gendc
.toobig  ANOp
&start   SetA  &count_digits-&No_of_Digits+1
&outid   SetC  '&id'(&start,*)
         AGo   .gendc
.toosmall ANOp
&maxzeroes SetC '00000000'
&extra0s SetA  &No_of_Digits-&count_digits
&zeroes  SetC  '&maxzeroes'(1,&extra0s) get the correct number
&outid   SetC  '&zeroes.&id'
.gendc   ANOp  ,
msgt&id  DC    C'&outID&TYPE '          Prefix
         AIf   (&FOLD eq 0).nofold
&uppmsg  SetC  (UPPER '&MSG')           Fold to upper case
         DC    C&uppmsg                 Upper Case Text
         AGo   .xltcont
.nofold  ANOp
         DC    C&MSG                    Text
.xltcont ANOp
ML&ID    EQU   *-MSGt&id                Message Length
EL&ID    EQU   *-MSG&ID                 Message Element Length
         AGo   .NOTES
.*                                                                    *
.*                                                                    *
.*       PROCESS TYPE = END                                           *
.*                                                                    *
.*                                                                    *
.END1    ANOp
         AIf   ('&MSGDEF' NE '').END2
&ERR(8)  SetB  1
         AGo   .NOTES
.END2    ANOp
MDSMSGND DC    AL4(X'FFFFFFFF')         End of Messages
MDSDIRB  DS    0F                       Begin Directory of Addrs
&COUNT   SetA  1                        LOOP CONTROL
.LOOP    ANOp
.*                                                                    *
.*                                                                    *
.*       CREATE TABLE OF ADDRESSES OF MESSAGES                        *
.*                                                                    *
.*                                                                    *
         AIf   ('&BINID(&COUNT)' EQ '').NEXT
         DC    F'&BINID(&COUNT)'        FIRST MSG ID IN GROUP
         DC    A(MSG&DISP(&COUNT)-MSG&FIRST) DISPLACEMENT IN GROUP
.NEXT    ANOp
&COUNT   SetA  &COUNT+1                 UPDATE LOOP CONTROL
         AIf   ('&COUNT' LT '&I').LOOP  MORE ENTRIES IN TABLE OF
.*                                      MESSAGE ADDRESSES
MDSDIRE  EQU   *                        END OF DIRECTORY TBL
.dsect2  ANOp
         AIf   ('&TYPE' NE 'DSECT').dsect3 Generate rest of whatever
.* note that these DCs are to define the DSECT and they MUST match
.* the DCs following just below after the loctr
MDSSTRT  DS    A(0)                 Addr of First Msg
MDSDIRA  DS    A(0)                 Addr of Msg Directory
MDSDIRND DS    A(0)                 Addr of End of Directory
MDS000   DS    A(0)                 Addr of Msg 000
         MExit
.dsect3  ANOp
PutFirst LoCtr
         DC    A(MSG&FIRST)
         DC    A(MDSDIRB)
         DC    A(MDSDIRE)
         DC    A(MsgFirst)
&MSGDEF  SetC  ''                       RESET
.NOTES   ANOp
.*
.*       MNotes
.*
         AIf   (NOT &ERR(1)).NOT1
         MNote 8,'TYPE &type. is invalid'
.NOT1    ANOp
         AIf   (NOT &ERR(2)).NOT2
         MNote 8,'START has been omitted or END has been encountered'
.NOT2    ANOp
         AIf   (NOT &ERR(3)).NOT3
         MNote 8,'Message id &id. is out of order'
.NOT3    ANOp
         AIf   ((NOT &ERR(4)) AND (NOT &ERR(5)) AND (NOT &ERR(6))).NOT4
         MNote 8,'Message id &id. is not valid'
.NOT4    ANOp
         AIf   (NOT &ERR(7)).NOT7
         MNote 8,'Message table CSect name conflicts with prefix-id '
.NOT7    ANOp
         AIf   (NOT &ERR(8)).NOT8
         MNote 8,'TYPE=END not accepted; TYPE=START omitted or invalid'
.NOT8    ANOp
         AIf   (NOT &ERR(9)).NOT9
         MNote 8,'Message text greater than &maxtext. bytes'
.NOT9    ANOp
         MEnd