**********************************************************************
*
* (C) COPYRIGHT IBM CORPORATION 2009, 2021.
*     Copyright Contributors to the GenevaERS Project.
* SPDX-License-Identifier: Apache-2.0
*
**********************************************************************
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
*  or implied.
*  See the License for the specific language governing permissions
*  and limitations under the License.
*
                        EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        EXTRACT FILE CONTROL INFORMATION                             *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
EXTFILE  DSECT                 EXTRACT FILE CONTROL  AREA  DEFINITION
*
EXTDDNAM DS    CL8             EXTRACT FILE DDNAME
EXTVDPA  DS    FDL08           EXTRACT FILE VDP 200  RECORD   ADDRESS
EXTDCBA  DS    A               EXTRACT FILE DCB      ADDRESS
EXTDECBF DS    A               EXTRACT FILE FIRST    DECB     ADDRESS
EXTDECBC DS    A               EXTRACT FILE CURRENT  DECB     ADDRESS
EXTPUTA  DS    A               EXTRACT FILE WRITE    ROUTINE
EXTCHKA  DS    A               EXTRACT FILE CHECK    ROUTINE
EXTPRINT DS    A               EXTRACT FILE PRINT    NEXT     POINTER
EXTINUSE DS    A               EXTRACT FILE IN-USE   POINTER
EXTEOBAD DS    A               CURRENT END-OF-BUFFER ADDRESS
EXTRECAD DS    A               CURRENT      RECORD   ADDRESS
EXTRECLN DS    HL2             CURRENT      RECORD   LENGTH
EXTCNT   DS    XL8             EXTRACT FILE RECORD COUNT now binary
EXTBYTEC DS    xL8             EXTRACT FILE BYTE COUNT now binary
EXTRECFM DS    XL2             EXTRACT FILE RECORD   FORMAT
EXTMINLN DS    HL2             EXTRACT FILE MINIMUM  RECORD   LENGTH
EXTLRECL DS    HL2             EXTRACT FILE LOGICAL  RECORD   LENGTH
         ds    0f
EXTPIPEP DS    HL2             PARENT THREAD  COUNT  ("PIPED INPUT")
EXTPIPED DS    HL2             THREAD  DONE   COUNT  ("PIPED INPUT")
EXTPIPEC DS    HL2             CHILD  THREAD  COUNT  ("PIPED INPUT")
EXTBUFNO DS    HL2             NUMBER  OF   BUFFERS
EXTBLKSI DS    HL2             BLOCKSIZE
extflag  ds    x               Flage byte
extfmtph equ   x'80'            This ddname is used in a Format Phase
         ds    xl1             spare
EXTPUT_6431  DS    A           extract file amode 64 WRITE    ROUTINE
EXTCHK_6431  DS    A           extract file amode 64 check    ROUTINE
         ds    0f
*
EXTFILEL EQU   *-EXTFILE
*
* Structure for each instance of input partition/replicate of exit
EXUEXU   DSECT
EXUOUTBN DS    A                association to DB2 HPU sub task
EXUASSOC DS    XL1              Association done
         DS    XL3              Spare
EXUECBMA DS    XL4              ECB THAT MAIN TASK WAITS ON
EXUECBEX DS    XL4              ECB THAT EXITS WAIT ON
EXURPOS  DS    A                CURRENT POSITION OF RECORD IN BLK
EXURLAST DS    A                POSITION OF LAST BYTE IN DATABLOCK
EXUROWLN DS    F                CALCULATED ROW LENGTH
EXUCNT1  DS    F                # times INZEXIT instance returned block 
EXUEOF   DS    X                This instance returned final data block
EXUWAIT  DS    X                This instance filled buffer and waiting
EXUSTAT  DS    X                1: exit instance filling buffer.
*                               2: exit instance has filled buffer
*                               3: exit instance being processed MR95
EXUFINAL DS    X                This instance pending final call after
*                                returning its last blk
EXURNUM  DS    F                Number records in returned block
EXUBLKA  DS    A                Address data block
*
EXUEXUL  EQU   *-EXUEXU
                        SPACE 5
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        LITERAL POOL WRITE EXTRACT RECORD AREA ("LT_WR")             *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
LTWRAREA DSECT                 "LTWR" LITERAL POOL  WRITE EXTRACT AREA
*
LTWRROWA DS    AL04            LOGIC   TABLE  ROW   ADDRESS
*
LTWRWORK DS    AL04            WRITE   EXIT   PGM   WORK  AREA  ANCHOR
LTWRSUMA DS    AL04            SUMMARY VIEW   WORK  AREA  ADDRESS
*
LTWRCNTI DS    xl08            EXTRACT RECORD COUNT - INPUT
LTWRCNTO DS    xl08            EXTRACT RECORD COUNT - OUTPUT
*
LTWRARLN EQU   *-LTWRAREA
                        EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        LOOK-UP BUFFER AREA DEFINITION                               *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
LKUPBUFR DSECT                 LOOK-UP BUFFER AREA PREFIX
*
LBNEXT   DS    AL04            NEXT    BUFFER POINTER (0 = END-OF-LIST)
*
LBLEN    DS    HL02            THIS    LOOKUP BUFFER  LENGTH
*
         DS    XL02            Padding
LBDDNAME DS   0CL08            FILE    DDNAME/ID
LBFILEID DS    FL04            FILE    ID
         DS    CL04            RIGHT   HALF   OF  DDNAME
LBLRID   DS    FL04            LOGICAL RECORD     ID
LBPATHID DS    FL04            LOOK-UP PATH       ID
LBPARENT DS    AL04            PARENT  JOIN   LOOK-UP    BUFFER  ADDR
LBKEYOFF DS    HL02            LOGICAL RECORD KEY OFFSET
LBKEYLEN DS    HL02            LOGICAL RECORD KEY LENGTH
*
LBSUBNAM DS   0CL08            CALLED  SUBROUTINE NAME
LBTBLBEG DS    FDL08           MEMORY  RESIDENT   TABLE  BEGIN ADDRESS
*
LBSUBADR DS   0AL04            CALLED  SUBROUTINE ADDRESS
LBTBLEND DS    FDL08           MEMORY  RESIDENT   TABLE  END   ADDRESS
*
LBSUBWRK DS   0AL04            CALLED  SUBROUTINE WORK   AREA  ANCHOR
LBMIDDLE DS    FDL08           ADDRESS OF MIDDLE  ROW
*
LBLSTFND DS    FDL08           LAST    CALL  ENTRY  FOUND  ADDRESS
LBLSTRC  DS    FL04            LAST    CALL  RETURN CODE
LBRECCNT DS    FL04            MEMORY  RESIDENT   TABLE  ROW   COUNT
LBRECLEN DS    HL02            MEMORY  RESIDENT   TABLE  ROW   LENGTH
LBEFFOFF DS    HL02            OFFSET  OF EFFECTIVE DATE
LBLKSTK# DS    HL02            LOOK-UP STACK ENTRY  COUNT
LBFLAGS  DS    XL02            PROCESSING FLAGS
LBMEMRES EQU   X'80'           ....1000 0000  MEMORY     RESIDENT TABLE
LB64BRES EQU   X'40'           ....0100 0000  64 BIT MEM RESIDENT TABLE
lbasmtyp EQU   X'20'           ....0010 0000  CONTINUED  DATASPACE TBL
LBEFFDAT EQU   X'10'           ....0001 0000  EFFECTIVE  DATES PRESENT
LBSUBPGM EQU   X'08'           ....0000 1000  SUBROUTINE  CALL
LBINIT   EQU   X'04'           ....0000 0100  INITIALIZATION   CALLED
LBCLOSE  EQU   X'02'           ....0000 0010  CLOSE    PHASE   CALLED
LBEFFEND EQU   X'01'           ....0000 0001  END      DATES  PRESENT
*
LBV3RED  EQU   X'80'           ....1000 0000  REF DATA FROM V3 FMT  RED
LBADJPOS EQU   X'40'           ....0100 0000  ADJ STRT POS (V4REH+V3RED
LBWRTX   EQU   X'20'           ....0010 0000  TOKEN WRITTEN BY EXIT
LBEXITOPT EQU  X'10'           ....0001 0000  LU exit is optimizable
*
*
LBLSTCNT DS    xl08            LAST CALL EVENT RECORD NUMBER (now bin)
*
* info for in memory lookup table
*
LBINDEX  DS    CL1             Reference data index type
LBBINARY EQU   C'B'            Ref data index Bin tree
LBHASH   EQU   C'H'            Ref data index hash table
LBHASHT  DS    CL1             hash type
LBPACK   EQU   C'P'            Ref data key PACK before hash
LBHPRIME DS    FD
LBHASHBEG DS   FD              start of hash table index
LBHASHEND DS   FD              End of hash table index
LBCOLLISION DS  F               Number of hash table collisions
*
* info used by lookup exits
*
         ORG   LBINDEX
LBSTRTUP DS    CL32            STARTUP  PARAMETERS
*
*        This LBPARML definition needs to be kept in sync with
*        the initial portion of the GENPARM DSECT.
*
LBPARML  DS   0D               LOOK-UP  EXIT  PARAMETER    LIST
LBENVA   DS    A               ENVIRONMENT DATA ADDRESS
LBFILEA  DS    A               EVENT FILE  INFO ADDRESS
LBSTARTA DS    A               START-UP    DATA ADDRESS
LBRECA   DS    A               EVENT     RECORD POINTER  - CURRENT
LBEXTRA  DS    A               EXTRACT   RECORD ADDRESS  - CURRENT
LBKEYA   DS    A               LOOK-UP   KEY    ADDRESS
LBANCHA  DS    A               WORKAREA  ANCHOR POINTER    ADDRESS
LBRTNCA  DS    A               RETURN    CODE   ADDRESS
LBRPTRA  DS    A               RESULT    RECORD POINTER    ADDRESS
LBBLKSIA DS    A               BLOCKSIZE
LBPRMLEN EQU   *-LBPARML
*
LBFNDCA  DS    A               LOOK-UP       FOUND COUNTER ADDRESS
LBNOTCA  DS    A               LOOK-UP NOT   FOUND COUNTER ADDRESS
lbfndcnt DS    fd              LOOK-UP       FOUND COUNTER
lbnotcnt DS    fd              LOOK-UP NOT   FOUND COUNTER
*
LBSUBENT DS    A               TRUE SUBROUTINE ENTRY POINT
LBWEPATH DS    FL04            Path ID from the workbench
LBEVENTA DS    FD              Address of source/event record
*
LBKEY    DS   0CL01            LOGICAL RECORD KEY
LBDATA   DS   0CL01            LOGICAL RECORD DATA (OPTIONAL)
*
LBPREFLN EQU   *-LKUPBUFR      RECORD  BUFFER AREA PREFIX LENGTH
                        SPACE 5
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        LOOK-UP TABLE ENTRY DEFINITION                               *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
LKUPTBL  DSECT                 LOOK-UP TABLE  ENTRY DEFINITION
* Field names for Binary search tree
LKLOWENT DS    FDL08           LOW  VALUE ROW ADDRESS
LKHIENT  DS    FDL08           HIGH VALUE ROW ADDRESS
* Fields names for HASH table indexing
         org   LKUPTBL
LKSCOUNT DS    FDL08           Number in this syn chain (collisions)
LKSNEXT  DS    FDL08           Next in synonym chain
LKUPDATA DS   0CL01
*
LKPREFLN EQU   *-LKUPTBL       LOOK-UP TABLE  ENTRY PREFIX LENGTH
                        SPACE 5
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        LOOK-UP TABLE DATA HEADER RECORD DEFINITION (REH)            *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
TBLHEADR DSECT                 TABLE   DATA   HEADER RECORD
*
TBFILEID DS    FL04            FILE    ID
TBRECID  DS    FL04            LOGICAL RECORD ID
TBRECCNT DS    FL04            RECORD  COUNT
TBRECLEN DS    HL02            RECORD  LENGTH
TBKEYOFF DS    HL02            KEY     OFFSET
TBKEYLEN DS    HL02            KEY     LENGTH
TBXFILE# DS   0HL02            "JLT"   EXTRACT  FILE NUMBER
TBDSAMRD DS    CL01            "DSAM"    READ INDICATOR (VERSION 3)
TBEFFIND DS    CL01            EFFECTIVE DATE INDICATOR (VERSION 3)
TBABOVET DS   0FL04            ABOVE   THRESHOLD RECORD  COUNT (V3)
TBREDVER DS    CL01            "RED"   VERSION  (SET BY MR96)
TBEFFDAT DS    XL01            EFFECTIVE DATE OPTION CODE
TBADJPOS DS    XL01            ADJUST  STARTING POSITIONS (N/Y)
TBTXTFLG DS    XL01            TEXT DATA FLAG
TBHRECL  equ   *-TBLHEADR         length of record data needed
TBREFMEM ds    fdL8            Memory needed for all refernce data
TBHPRIME DS    FDL8            PRIME number used for hash table size
TBHMULT  DS    XL04            Hash table multiplying factor
TBINDEX  DS    CL1             Reference data index type
TBBINARY EQU   C'B'              Ref data index Bin tree
TBHASH   EQU   C'H'              Ref data index hash table
TBHASHT  DS    CL1             hash type
*PACK   EQU   C'P'              Ref data key PACK before hash
*
TBHDRLEN EQU   *-TBLHEADR         TABLE HEADER LENGTH
                        EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        FUNCTION CODE TABLE DEFINITION                               *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
FUNCTBL  DSECT                 FUNCTION CODE TABLE
*
FCFUNC   DS    CL04            FUNCTION CODE MNEMONIC
*
FC_RTYP   DS   XL01            FUNCTION FORMAT   CODE
FC_RTYP01 EQU  X'01'                  - HEADER
FC_RTYP02 EQU  X'02'                  - NEW      VIEW
FC_RTYP03 EQU  X'03'                  - FORMAT   0
FC_RTYP04 EQU  X'04'                  - FORMAT   1
FC_RTYP05 EQU  X'05'                  - FORMAT   2
FC_RTYP06 EQU  X'06'                  - READ     EVENT
FC_RTYP07 EQU  X'07'                  - WRITE    EXTRACT
FC_RTYP08 EQU  X'08'                  - COMPARE  CONSTANT
FC_RTYP09 EQU  X'09'                  - VARIABLE NAME
FC_RTYP10 EQU  X'0A'                  - VARIABLE NAME     VALUE
FC_RTYP11 EQU  X'0B'                  - VARIABLE CALCULATION
FC_RTYP12 EQU  X'0C'                  - VARIABLE FUNCTION FORMAT 1
FC_RTYP13 EQU  X'0D'                  - VARIABLE FUNCTION FORMAT 2
*
*  Function option codes are now fixed by the actual verb, or derived
*  from the verb text, so these two bytes redundant
*
*FC_OPT1  DS    XL01            FUNCTION OPTION     CODES
*FC_OPT2  DS    XL01            FUNCTION OPTION     CODES
*
FC_CON   EQU   X'01'                  - CONSTANT  (LITERAL POOL)
FC_EVNT  EQU   X'02'                  - EVENT      RECORD
FC_LKUP  EQU   X'03'                  - LOOK-UP    RECORD
FC_PREV  EQU   X'04'                  - PREVIOUS   RECORD
FC_LKEY  EQU   X'05'                  - LOOK-UP    KEY
FC_SKEY  EQU   X'06'                  - SORT       KEY
FC_TKEY  EQU   X'07'                  - TITLE      KEY
FC_DTAR  EQU   X'08'                  - DATA              AREA ("DT")
FC_CTAR  EQU   X'09'                  - CALCULATED COLUMN AREA ("CT")
FC_LKUP2 EQU   X'0A'                  - 2ND LOOKUP RECORD
FC_ACUM  EQU   X'0B'                  - NUMERIC    ACCUMULATOR
FC_PRIOR EQU   X'0C'                  - Prior Column (extract record)
*
*  Source and target formats are fixed, or derived from the logic table
*  formats, so these two bytes redundant
*
*FCSRCFMT DS    XL01            SOURCE   FORMAT     CODE
*FCTGTFMT DS    XL01            TARGET   FORMAT     CODE
*
FC_ALNUM EQU   X'01'                    ALPHANUMERIC
FC_ALPHA EQU   X'02'                    ALPHABETIC
FC_NUM   EQU   X'03'                    NUMERIC
FC_PACK  EQU   X'04'                    PACKED
FC_SORTP EQU   X'05'                    PACKED  -  SORTABLE
FC_BIN   EQU   X'06'                    BINARY
FC_SORTB EQU   X'07'                    BINARY  -  SORTABLE
FC_BCD   EQU   X'08'                    BINARY     CODED      DECIMAL
FC_MASK  EQU   X'09'                    MASKED     NUMERIC
FC_EDIT  EQU   X'0A'                    EDITED     NUMERIC
FC_FLOAT EQU   X'0B',16                 FLOATING   POINT, 16 bytes     +
                                        extended DFP format
FC_GEN#  EQU   X'0C'                    GENEVA     NUMBER
*
*  equates for the function table arrays (defined in 95, used in 96)
*
Row_length equ (fc_gen#+1)*4
array_size equ (fc_gen#+1)*row_length
*
FCCODELN DS    HL02            MODEL    EXECUTION  CODE       LENGTH
FCLITPLN DS    HL02            LITERAL  POOL       USAGE      LENGTH
FCMODELA DS    AL04            MODEL    EXECUTION  CODE       ADDRESS
FCRELOCA DS    AL04            MODEL    RELOCATION TABLE      ADDRESS
*
FCLTSUB  DS    HL02            LOGIC    TABLE LOAD SUBROUTINE INDEX
FCSUBCOM EQU   01              COMPATIBLE LEN/FMT/CON/DEC/RND/SGN
FCSUBDEC EQU   02              COMPATIBLE         CON/DEC/RND/SGN
FCSUBH2  EQU   03              SIGNED   HALFWORD   SOURCE
FCSUBF4  EQU   04              SIGNED   FULLWORD   SOURCE
FCSUBLIM EQU   05              EVENT    FILE  READ LIMIT
FCSUBSGN EQU   06              SIGNED   TARGET
FCSUBUNS EQU   07              UNSIGNED TARGET
FCSUBBSN EQU   08              BOTH     SIGNED
FCSUBBUN EQU   09              BOTH     UNSIGNED
FCSUBSTU EQU   10              CONVERT  SIGNED  TO UNSIGNED
FCSUBUTS EQU   11              CONVERT  UNSIGNED  TO SIGNED
FCSUBLE  EQU   12              TARGET  LEN <= SOURCE LEN
FCSUBJUS EQU   13              NON-STANDARD JUSTIFICATION
FCSUBNDT EQU   14              NORMALIZED   DATES  REQUIRED
FCSUBLRG EQU   15              LARGE   NUMBERS (20,3)
FCSUBDTR EQU   16              DATA    TRUNCATION  CHECK
FCSUBB8  EQU   17              SIGNED   DOUBLEWORD SOURCE
FCSUBB8_UU EQU  18             Unsigned to Unsigned Binary 8
FCSUBB8_SS EQU  19             Signed   to Signed   Binary 8
FCSUBB8_SU EQU  20             Signed   to Unsigned Binary 8
FCSUBB8_US EQU  21             Unsigned to Signed   Binary 8
FCSUB_LONG EQU  22             Fields > 256
*
FCP1SUB  DS    HL02            PASS-1   SUBROUTINE INDEX
*CSUBPOS EQU   01              LONG SOURCE   FIELD POSITION
*CSUBLOF EQU   02              LONG TARGET   FIELD POSITION
*
FCP2SUB  DS    HL02            PASS-2   SUBROUTINE INDEX
*
FCENTLEN EQU   *-FUNCTBL
                        SPACE 5
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        NEW VIEW PROLOGUE LAYOUT  ("LT_NV")                          *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
NVPROLOG DSECT                 PROLOGUE FOR VIEW  ("NV"   FUNCTION)
*
NVNOP    jlnop *               NOP BRANCH   INSTRUCTION   (DISABLE)
NVLAYR8  lay   r8,0(0,0)       INITIALIZE  "CT" COL OCCURS POINTER
NVBRNCH  bras  r14,nvviewmv    BRANCH AROUND VIEW  HEADER  ("BRAS")
*
NVCONST  DS   0XL16            VIEW   HEADER CONSTANTS
NVVIEWID DS    FL04            VIEW   ID
NVLOGTBL DS    AL04            LOGIC  TABLE  ROW   ADDRESS   ("NV")
NVLITPSZ DS    FL04            LITERAL POOL  SIZE    (THIS    VIEW)
NVNXVIEW DS    AL04            NEXT    VIEW  CODE  ADDRESS
*
NVPROLEN EQU   *-NVPROLOG      "NV"   PROLOGUE LEN
*
nvviewmv mvc   0(0,0),0(0)     MOVE CURRENT VIEW ID         ("MVC")
         lay   r15,0              lit pool base is 512k from start
         mvc   0(0,0),0(0)     copy nvlogtbl to litp_hdr
         la    r11,0(,0)       copy next view address to r11 ("L")
NVTRACE  jnop  *               BRANCH TO TRACE  ROUTINE IF ENABLED
NVLEVNT  LG    R6,0(0,0)       Initialize Event Record Base Register
*
NVCODELN EQU   *-NVPROLOG      "NV"  CODE SEGMENT LENGTH

                        SPACE 5
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        Callview layout                                              *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
callview_dsect dsect
         LARL  R15,*              LOAD CALLING VIEW  RETURN    ADDRESS
         llgt  r1,ltwr200a-logictbl(,r5) get RETK logic pointer
         llgt  R1,vdp0200b_file_reader-vdp0200b_file_record(,r1)
         llgt  r14,ltwrre-logictbl(,r5)   Get WRTK's RE           pgc99
         lt    r0,ltreindx-logictbl(,r14) Get its index           pgc99
         jz    *+12                       Here if RE not RETK/RETXpgc99
         lgr   r14,r2                     Save this WRTK lit pool pgc99
         sgf   r14,4(,r2)                 Work out offset         pgc99
         llgt  r2,4(,r2)                  Set r2 to thread litp   pgc99
         lgr   r0,r14                     Put in right register   pgc99
         ds    0h                                                 pgc99
         lgf   r14,ltreindx-logictbl(,r1) Get index of next RETK  pgc99
         mghi  r14,4                      its a word              pgc99
         aghi  r14,litphdrl               allow for lit pool hdr  pgc99
         lgf   r14,0(r2,r14)              get its offset          pgc99
         sty   r0,0(r2,r14)               store prev lit pool     pgc99
         sty   r2,4(r2,r14)               and litpool for thread  pgc99
         la    r2,0(r2,r14)               New lit pool            pgc99
         llgt  R1,LTREES-LOGICTBL(,R1)   get ES logic pointer
         lgf   r14,ltesretn-logictbl(,r1)    Get litpool offset    pgc1
         st    r15,0(r14,r2)                 Save return in litp   pgc1
         lgf   r14,ltespr11-logictbl(,r1)   Get litpool offset     pgc1
         st    r11,0(r14,r2)                r11 for when we return pgc1
         llgt  R15,LTviewnv-logictbl(,R1) get code addr from LT
         aghi  r15,-callview_dsect_l
         br    r15
callview_dsect_l  equ *-callview_dsect

* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        VIEW LITERAL POOL HEADER                                     *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
LITP_HDR DSECT                 VIEW   LITERAL POOL   HEADER
*
LPVADDR  DS    AL04            Current view code address
LPlurtnc DS    fL04            Last lookup return code
lp_saved_litp ds  al04         saved litp_hdr (callview)
lp_return_adr ds  al04         return address (callview)
lp_nvcons_adr ds  al04         save for r11 if wrtk/wrtx goes to nv
*
LPEXTCNT DS    PL06            VIEW EXTRACT  RECORDS   WRITTEN  COUNT
LPLKPFND DS    PL06            VIEW LOOKUPS  FOUND     COUNT
LPLKPNOT DS    PL06            VIEW LOOKUPS  NOT FOUND COUNT
         DS    XL02
*
lp_prev_litpo  ds al04         offset of previous literal pool
lp_base_litp   ds al04         Always contains address of base lit pool
lp_RE_addr     ds al04         Address of RE entry
lp_r6_save     ds cl08         r6 save area event record address
         ds    0f
LITPHDRL EQU   *-LITP_HDR      LITERAL POOL HEADER LENGTH
                        SPACE 5
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        LITP construction statistics                                 *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

lpstatlitp   dsect           maintain vars formerly kept in piesave
lp_sybl_litp ds  f              symbol length
lp_cfel_litp ds  f              cfec   length
lp_totl_litp ds  f              total  length
lp_lksl_litp ds  f              xxxxx  length
lp_stat_leng equ *-lpstatlitp
lp_lfid_litp ds  f              lfid
lp_leng_litp ds  f              length
lp_stat_len  equ *-lpstatlitp

* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        COLUMN EXTRACT DATA DEFINITION                               *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
COLEXTR  DSECT                 COLUMN EXTRACT DATA
*
COLNO    DS    HL02            COLUMN NUMBER
COLDATA  DS    PL12            COLUMN DATA
*
COLDATAL EQU   *-COLEXTR       COLUMN DATA    LENGTH
                        EJECT
*
         ORG
                        SPACE 5
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*      E N V I R O N M E N T   V A R I A B L E   D E F I N I T I O N  *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
ENVVTBL  DSECT                 ENVIRONMENT VARIABLES
*
ENVVNEXT DS    AL04            NEXT ENV    VARIABLE NAME
ENVVNLEN DS    HL02            VARIABLE    NAME     LENGTH (-1)
ENVVNAME DS    CL16            VARIABLE    NAME
ENVVVLEN DS    HL02            VARIABLE    VALUE    LENGTH (-1)
ENVVVALU DS    CL128           VARIABLE    VALUE
*
ENVVTLEN EQU   *-ENVVTBL       ENVIRONMENT VARIABLE DATA LENGTH
*
         ORG
*
                        EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        T R A C E   P A R A M E T E R   T A B L E                    *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
PARMTBL  DSECT
*
PARMNEXT DS    AL4                NEXT  PARAMETER TABLE  ENTRY ADDRESS
PARMVIEW DS    FL4                VIEW   ID
PARMDDN  DS    CL8                EVENT     FILE  DDNAME
PARMFROM DS    xl8                BEGINNING EVENT RECORD COUNT
PARMTHRU DS    xl8                ENDING    EVENT RECORD COUNT
PARMrows DS   0FL8                TRACE LOGIC TABLE ROWs
PARMROWF DS    FL4                TRACE LOGIC TABLE ROW - FROM
PARMROWT DS    FL4                TRACE LOGIC TABLE ROW - THRU
PARMFLEN DS    FL4                TRACE LOGIC TABLE FUNC  CODE LENGTH
PARMFUNC DS    CL4                TRACE LOGIC TABLE FUNC  CODE
PARMLTAB DS    FL4                ABEND LOGIC TABLE ROW   NO.
PARMSGAB DS    FL4                ABEND MESSAGE NO.
PARMVOFF DS    HL2                EVENT FIELD VALUE OFFSET
PARMVLEN DS    HL2                EVENT FIELD VALUE LENGTH
PARMVALU DS    CL16               EVENT FIELD VALUE
PARMVALD DS    CL36               EVENT FIELD VALUE - displayable
PARMDUMP DS    CL8                INCL  EVENT RECORD  HEX DUMP IN TRACE
PARMcols DS   0FL8                trace from column FROMCOL THRUCOL
PARMfcol DS    FL4                trace from column FROMCOL
PARMtcol DS    FL4                trace thru column THRUCOL
*
PARMTLEN EQU   *-PARMTBL
                        EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*     C O M M O N   L A N G U A G E   E N V I R O N M E N T   A R E A *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
LEINTER  DSECT
*
LEPARM   DS   0A
LEFUNCA  DS    A                  FUNCTION CODE
LESUBRA  DS    A                  ENTRY    POINT   ADDRESS
LETOKNA  DS    A                  LANGUAGE ENVIRONMENT TOKEN ADDRESS
LEPARMA  DS    A                  CALLED   MODULE  PARAMETER LIST
LERTNCA  DS    A                  RETURN   CODE
LEREASA  DS    A                  REASON   CODE
LEFDBKA  DS    A                  FEEDBACK AREA
*
LECEEADR DS    A                  LANGUAGE ENVIRONMENT INTERFACE  ADDR
LETOKEN  DS    A                  LANGUAGE ENVIRONMENT TOKEN
LESUBADR DS   2A                  CALLED   ENTRY POINT ADDR   (DBLWORD)
LEPARMP  DS    A                  PARAMETER LIST ADDR
LERTNC   DS    F                  RETURN   CODE
LEREASON DS    F                  REASON   CODE
LERETADR DS    A                  RETURN   ADDRESS
LEFDBK   DS   3A                  FEEDBACK AREA
*
LERDECBA DS    A                  "GENPIPE/GENREAD"    DECB  LIST
LEWDECBA DS    A                  "GENPIPE" PIPE WRITE DECB  LIST
LELRECL  DS    F                  READ EXIT RETURNS
LERECFM  DS    X                  READ EXIT RETURNS
         DS    X                  (FILLER)
*
LEREGSAV DS  18F                  REGISTER  SAVE AREA
*
LEINTLEN EQU   *-LEINTER
                        EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        S Y M B O L   T A B L E   E N T R Y                          *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
SYMTABLE DSECT                    SYMBOL TABLE ENTRY
*
SYMVALAD DS     AL04              VALUE  ADDRESS
SYMVALEN DS     HL02              VALUE  LENGTH
*
SYMTBLEN EQU    *-SYMTABLE
*
                        EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        E X T R A C T   S U M M A R Y   W O R K   A R E A            *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
SUMAREA  DSECT                    SUMMARY  AREA DEFINITION
*
SUMSAVE  DS  18FD                 REGISTER SAVE AREA
*
SUMWORK  DS    FD                 DOUBLEWORD    WORK  AREA
*
SUMSUBOP DS    FD                 SUBTOTAL OPTION CODES  POINTER
*
STAKBEG  DS    FD                 BEGINNING     ADDRESS
STAKEND  DS    FD                 ENDING        ADDRESS
STAKTOP  DS    FD                 TOP     ENTRY IN  STACK
STAKBOT  DS    FD                 BOTTOM  ENTRY IN  STACK
STAKCURR DS    FD                 CURRENT ENTRY IN  STACK (FLUSH)
*
HASHBEG  DS    FD                 HASH    TABLE BEGINNING  ADDR
ANCRCURR DS    FD                 CURRENT HASH  TABLE      ANCHOR
*
STAKHDR  DS    FD                 STACK ENTRY   CONTAINING HEADER REC
SUMTEMP  DS    FD                 NEW   EXTRACT RECORD TEMP AREA ADDR
*
SCALE    DS    FD                 HASK  KEY SCALING FACTOR
PRIME    DS    FD                 HASK  KEY SCALING FACTOR
*
SUMMINC  DS    H                  MINIMUM  "CT" COLUMN NO.
SUMMAXC  DS    H                  MAXIMUM  "CT" COLUMN NO.
*
ELEMSIZE DS    F                  STACK ELEMENT SIZE
MAXSYNLN DS    F                  MAXIMUM SYNONYM   CHAIN  LENGTH
*
         IARV64 MF=(L,GETMAIN)
*
SUMEXTR  DS   0C                  SUMMARY EXTRACT  RECORD  AREA
*
SUMLEN   EQU   *-SUMAREA
                        SPACE 5
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        S U M M A R Y   S T A C K   E N T R Y   P R E F I X          *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
STACKENT DSECT                    SUMMARY  STACK  ENTRY   PREFIX
*
STKPREV  DS    FD                 PREVIOUS ENTRY  IN      STACK
STKNEXT  DS    FD                 NEXT     ENTRY  IN      STACK
STKHASHA DS    FD                 HASH     TABLE  ANCHOR  ADDR
STKSYPRV DS    FD                 HASH     TABLE  SYNONYM CHAIN PREV
STKSYNXT DS    FD                 HASH     TABLE  SYNONYM CHAIN NEXT
STKACUM  DS    FD                 "CT"     COLUMN ACCUMULATORS
STKLENG  DS    H                  RECORD   LENGTH WITHOUT "CT"  COLUMNS
STKMAXC  DS    H                  MAXIMUM  COLUMN NUMBER  USED
*
STKRDW   DS   0H                  RDW  OF  SAVED  EXTRACT RECORD
*
STACKLEN EQU   *-STACKENT         STACK    PREFIX LENGTH
                        EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        E X T R A C T   R E C O R D   A R E A                        *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
EXTREC   DSECT                    EXTRACT RECORD  WORK   AREA
*
EXRECLEN DS    HL02
         DS    XL02
EXSORTLN DS    HL02               SORT    KEY     LENGTH
EXTITLLN DS    HL02               SORT    TITLE   LENGTH
EXDATALN DS    HL02               EXTRACT DATA    LENGTH
EXNCOL   DS    HL02               NUMBER  OF  CALCULATED COLUMNS ("CT")
EXVIEW#  DS    FL04               VIEW    NUMBER  (+X'80000000')
EXSRTKEY DS   0CL01
                        SPACE 3
         DS    CL(32756-(exsrtkey-exreclen)) BUFFER  AREA
extrecl  equ   *-exreclen
                        EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        B I L L I N G   D A T A   R E C O R D                        *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         ORG   EXTREC
*
BILLREC  DS   0CL80               BILLING DATA    RECORD
BLPROCDT DS    CL08               VIEW    PROCESSED DATE
BLPROCTM DS    CL04               VIEW    PROCESSED TIME
BLDDNAME DS    CL08               VIEW    DDNAME
BLRECTYP DS    CL02               BILLING RECORD    TYPE
*                                    01 = DDNAME         RECORD
*                                    02 = DDNAME/VIEW    RECORD
*                                    03 = DDNAME/VIEW    RECORD
*
BLDDSEG  DS   0CL58               EVENT   DDNAME SEGMENT
BLEVTCNT DS    PL06               EVENT   DDNAME RECORD  COUNT
BLDDFILL DS    CL52               FILLER
*
         ORG   BLDDSEG
BLDRSEG  DS   0CL58               DDNAME/VIEW  SEGMENT
BLVIEW#  DS    FL04               VIEW   ID
BLUSERID DS    CL08               USER   ID
BLSTATUS DS    CL01               VIEW   ERROR STATUS
*                                    L = EXTR  REC LIMIT REACHED
*                                    W = EXTR  REC LIMIT (USER EXIT)
*                                    M = MASK  ERROR
*                                    B = BAD   DATA
*                                    7 = BAD   NUMERIC  DATA (S0C7)
*                                    F = BAD   FUNCTION/FORMAT CODE
BLFILENO DS    HL02               EXTRACT FILE NUMBER
BLEXTCNT DS    PL06               VIEW EXTRACT RECORD COUNT
BLLKPFND DS    PL08               LOOK-UPS     FOUND
BLLKPNOT DS    PL08               LOOK-UPS NOT FOUND
BLDRFILL DS    CL21               FILLER
*
         ORG   BLDDSEG
BLSRTSEG DS   0CL58               EXTRACT SORT SEGMENT
BLSRTFN  DS    HL02               EXTRACT FILE NUMBER
BLSRTREC DS    PL08               EXTRACT SORT RECORD  COUNT
BLSRTBYT DS    PL08               EXTRACT SORT BYTE    COUNT
BLSRTFLR DS    CL40               FILLER
                        SPACE 3
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        C O N T R O L   R E C O R D S                                *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         ORG   EXTREC+l'billrec   (to avoid overlay)
*
CTLREC   DS   0CL44               CONTROL RECORD WORK AREA
CTRECLEN DS    HL02               RECORD  LENGTH
         DS    XL02
CTSORTLN DS    HL02               SORT KEY       AREA LENGTH
CTTITLLN DS    HL02               SORT KEY TITLE AREA LENGTH
CTDATALN DS    HL02               EXTRACT DATA   AREA LENGTH
CTNCOL   DS    HL02               NO. OF COLUMN CALCULATIONS
CTVIEW#  DS    FL04               VIEW   NUMBER
CTRECCNT DS    PL06               RECORD  COUNT
CTFILENO DS    HL02               FILE    NUMBER
CTPROCDT DS    CL08               PROCESSED DATE
CTPROCTM DS    CL06               PROCESSED TIME
CTFINPDT DS    CL06               FINANCIAL PERIOD DATE
CTRUNDT  DS    CL08               CURRENT   RUN    DATE
                        EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        I N I T I A L I Z A T I O N   V A R I A B L E S              *
*                                                                     *
*                   (OVERLAYS EXTRACT RECORD)                         *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
INITVAR  DSECT                    INITIALIZATION  TEMPORARY  VARIABLES
*
REGSAVE  DS  18F                  MAIN  DRIVER'S  REGISTER   CONTENTS
*
LTV3SAVE DS   fd                  RETURN ADDRESS  SAVE AREA
PASS1SAV DS   fd                  RETURN ADDRESS  SAVE AREA
*
DRIVLRID DS    F                  CURRENT  "DRIVER"    LOGICAL  REC  ID
*
DRIVDDN  DS   0CL8                CURRENT  "DRIVER"    FILE     DDNAME
DRIVFILE DS    FL4                CURRENT  "DRIVER"    FILE     ID
         DS    CL4                RIGHT     HALF OF    DDNAME
*
PREVDDN  DS   0CL8                PREVIOUS "DRIVER"    FILE     DDNAME
PREVFILE DS    FL4                PREVIOUS "DRIVER"    FILE     ID
         DS    CL4                RIGHT     HALF OF    DDNAME
*
PREVVDPA DS    FD                 PREVIOUS "VDP"  RECORD     ADDRESS
*
FRSTRETK DS    A                  FIRST "RETK/ET" TOKEN SET ROW ADDRESS
PREVRETK DS    A                  PREV  "RETK/ET" TOKEN SET ROW ADDRESS
*
FILEBEG  DS    A                  CURRENT FILE ID LOGIC TBL ROW ADDRESS
ESCODBEG DS    A                  "ES"    MACHINE CODE  BEGINNING  ADDR
FIRSTVN  DS    A                  FIRST  VARIABLE NAME  TBL ROW ADDRESS
FIRSTRE  DS    A                  FIRST    "RE"   LOGIC TBL ROW ADDRESS
FIRSTNV  DS    A                  FIRST    "NV"   LOGIC TBL ROW ADDRESS
FIRSTKNV DS    A                  FIRST TOKEN RDR LOGIC TBL ROW ADDRESS
PREVTKNV DS    A                  PREV  TOKEN RDR LOGIC TBL ROW ADDRESS
PREVLITP DS    A                  PREV  LITERAL   POOL  HEADER  ADDRESS
CURRRE   DS    A                  CURRENT  "RE"   LOGIC TBL ROW ADDRESS
CURRNV   DS    A                  CURRENT  "NV"   LOGIC TBL ROW ADDRESS
PREVNV   DS    A                  PREVIOUS "NV"   NON-TOKEN ROW ADDRESS
PREVLU   DS    A                  PREVIOUS "LU"   LOGIC TBL ROW ADDRESS
PREVWR   DS    A                  PREVIOUS "WR"   LOGIC TBL ROW ADDRESS
PREVES   DS    A                  PREVIOUS "ES"   LOGIC TBL ROW ADDRESS
*
PREVDISK DS    A                  PREVIOUS DISK   "ES"  ROW     ADDRESS
PREVTAPE DS    A                  PREVIOUS TAPE   "ES"  ROW     ADDRESS
PREVOTHR DS    A                  PREVIOUS OTHER  "ES"  ROW     ADDRESS
*
PREVNODE DS    A                  BINARY  SEARCH  PREVIOUS PATH ENTRY
*
ROWRELO  DS    F                  ROW  NO. RELOCATION VALUE (VERSION 3)
*
CLONFRRE DS    A                  FIRST    "RE"   LOGIC TBL ROW ADDRESS
CLONCRRE DS    A                  CURRENT  "RE"   LOGIC TBL ROW ADDRESS
CLONFRTK DS    A                  FIRST TOKEN RDR LOGIC TBL ROW ADDRESS
CLONPVTK DS    A                  PREV  TOKEN RDR LOGIC TBL ROW ADDRESS
CLONPVES DS    A                  PREVIOUS "ES"   LOGIC TBL ROW ADDRESS
*
INITNV   DS    A                  INITIALIZATION VIEW FOR  "ES" SET
*
LASTMULT DS    A                  LAST  MULTIPLE OCCURRENCE ROW ADDRESS
*
LASTACCR DS    F                  LAST  ACCUMULATOR ROW#
LASTACCA DS    A                  LAST  ACCUMULATOR ADDRESS
*
ESPOOLSZ DS    F                  "ES"  LITERAL POOL   SIZE
ESSETCNT DS    F                  TOTAL "ES"    SET   COUNT
*
DISKCNT  DS    F                  DISK  "ES" SET  COUNT
TAPECNT  DS    F                  TAPE  "ES" SET  COUNT
OTHRCNT  DS    F                  OTHER "ES" SET  COUNT
*
TIOTADDR DS    A                  TIOT   ADDRESS  FROM   "EXTRACT"
*
SAVEPIPE DS    A                  SAVE    "PIPED" FILE    ADDRESS
SVEXTLIM DS    F                  SAVE    EXTRACT LIMIT
SVLITPAD DS    A                  SAVE    CURRENT LITERAL POOL ADDRESS
SVLUFILE DS    CL8                SAVE    CURRENT LOOK-UP FILE ID
SVLULRID DS    F                  SAVE    CURRENT LOOK-UP REC  ID
SVLUPATH DS    F                  SAVE    CURRENT LOOK-UP PATH ID
SVLUWPATH DS   F                  SAVE CURRENT LOOKUP Workbench PATH ID
SVLUJOIN DS    A                  SAVE CURRENT LOOK-UP PARENT JOIN
SVLUSUBR DS    CL08               SAVE    CURRENT LOOK-UP EXIT NAME
SVLUPARM DS    CL32               SAVE    CURRENT LOOK-UP EXIT PARMS
SVLUOPT  DS    XL01               SAVE    CURRENT LOOK-UP OPTMIZABLE
         DS    XL01
SVCOLMN# DS    H                  LARGEST  COLUMN NUMBER  ENCOUNTERED
SVTITLE# DS    H                  LARGEST  TITLE  KEY NO. ENCOUNTERED
SVTHRDID DS    H                  PREVIOUS THREAD ID  NO.
SAVEBUFL DS    H                  EXTRACT  BUFFER LENGTH
SVDATALN DS    H                  PREVIOUS COLUMN'S "DT"  AREA OFFSET
SVSORTLN DS    H                  PREVIOUS SORT   KEY     AREA OFFSET
MAXNDX#  DS    H                  MAXIMUM INDEX   VAR   NUMBER
FILECNT  DS    H                  CURRENT EXTRACT FILE  NUMBER
*
KEYPOSN  DS    H                  CURRENT LOOK-UP KEY   FIELD  POSITION
LKUPSTKO DS    H                  CURRENT LOOK-UP STACK OFFSET
LKUPSTK# DS    H                  CURENT  LOOK-UP STACK COUNT
*
READLIM  DS    xL8                EVENT   FILE    READ LIMIT
*
UR20PARM GVBUR20P pre=UR20,dsect=n
*UR20PARM DS   0A                  GVBUR20 CALL PARAMETER AREA
*
*UR20FC   DS    HL02               FUNCTION  CODE
*UR20RC   DS    HL02               RETURN    CODE
*UR20ERRC DS    HL02               ERROR     CODE
*UR20RECL DS    HL02               RECORD    LENGTH
*UR20RECA DS    AL04               RECORD    AREA      ADDRESS
*UR20RBN  DS    FL04               RELATIVE  BLOCK     NUMBER
*UR20DDN  DS    CL08               FILE      DDNAME
*UR20OPT1 DS    CL01              I/O MODE(I=INPUT, O=OUTPUT, D=DIRECT)
*UR20OPT2 DS    CL01
*UR20NBUF DS    HL02               NUMBER    OF I/O    BUFFERS
*UR20WPTR DS    AL04               WORK      AREA      POINTER
*
LITPOOLS DS    FL04               LITERAL   POOL SIZE
LITPOOLB DS    AL04               LITERAL   POOL ADDRESS - BEG
LITPOOLC DS    AL04                                      - CURR
LITPOOLM DS    AL04                                      - MAX
LITPCNTA DS    FL04                                      - actual count
*
LITSTATS DS    FL04               LITERAL POOL STATS     - size
LITSTATA DS    AL04                                      - start addr
LITSTATC DS    AL04                                      - curr  addr
LITSTATE DS    AL04                             - last possible entry
*
SYMTBLB  DS    AL04               LITERAL   POOL SYMBOL  TABLE - BEG
SYMTBLC  DS    AL04                                            - CURR
SYMTBLM  DS    AL04                                            - MAX
*
*        The following 2 fields are used during PASS1 processing
*        All RETK/ET sets are processed after the relevant RENX/ES
*        set has been processed. During the RENX/ES processing we add
*        the mates of any WRTK/WRTX verbs found to this queue. When
*        we come to the end of the ES we then process the RETK/ET sets
*        on the queue. While processing the the RETK/ET sets if we
*        come across anymore WRTK/WRTX verbs we add their mates to
*        the queue as well.
*        frstrtkn is the 1st one in queue and currrtkn is the last one
*        we added. Each RETK/RETX verb has a field LTRDNTKN which
*        points to the next RETK/RETX verb in this queue. So as we go
*        down the token chain we add them. When all have been processed
*        rest to 2 fields below to zero and turn the special processing
*        flag off.
*
frstrtkn ds    al04               READ tkn mate of 1st ES WRITE tkn
currrtkn ds    al04               READ tkn mate of cur ES WRITE tkn
*                                  that has just been added to queue
curres   ds    al04               The ES that drove the RETK/RETX's
p1_r1save ds   fd                 Save for r1 contents during ES proc
p1_r5save ds   fd                 Save for r5 contents during ES proc
p1_r7save ds   fd                 Save for r7 contents during ES proc
p1_return ds   fd                 Return address to original ES
litp_base ds   al04               Keeps start address of lit pool for
*                                  for current ES set being processed
*                                  in GVBMR96
litp_base_tok ds al04             Start addr of token lit pool section
p1clon_r2save ds fd               lit pool address save area during
*                                 P1CLONLB
dumy_ltlbanch ds al04             use this in P1CLONLB code
parent_token ds al04              keeps addr of current retk parent
tokncnt   ds  fl04
retkchan  ds   c                  flag usrd in P1CLONLB signalling we
cookie_content ds h               holds content code for cookie
initflag  ds   x                  flag used to reduce unnecessary
*                                 literal pool size increments
cons_fnd  equ  x'80'              symbol/constant found
litp2lrg  equ  x'40'              literal pool larger than 1MB
*                                   are processing RETK/ET set
trace_keyw equ x'20'              Used during PARMLOAD signals we are
*                                  processing a trace key word
parm_keyw  equ x'10'              Used during PARMLOAD signals we are
*                                  processing a standard key word
trace_1st  equ x'08'              TRACLOAD processing first on line
*
cookie_call equ x'04'             Used during LTBLLOAD processing to
*                                 signal cookie is being used
litpstatovf equ x'02'             temporary litp stats buffer has
*                                 overflowed. wto and continue
*
initflag2 ds   x                  flag used at initialisation time
date_conv equ  x'80'              For CFxx must use date convert model
*
parm_start ds f                   Parsing parameters in TRACLOAD
parm_end   ds f                   Parsing parameters in TRACLAOD
parm_len   ds f                   Parsing parameters in TRACLAOD
         ds    0f
*
         IARV64 MF=(L,GET64MEM)
*
BINSTACK DS  32XL24               BINARY  SEARCH  TREE - NODE STACK
*
fisdates ds  f                    First entry on Fiscal date chain
fisdatee ds  f                    Last entry on Fiscal date chain
fiscal_default_cnt ds f
*
*
*       BATCH_DATE Dates
cur_bdaynum   ds  f
*       BATCH_DATE Date character format
cur_bdate     ds 0cl8
cur_byear     ds  cl4
cur_bmth      ds  cl2
cur_bday      ds  cl2
*       BATCH_DATE Date binary format
cur_bbdate    ds 0f
cur_bbyear    ds  f
cur_bbmth     ds  f
cur_bbday     ds  f
*
*       FISCAL_DATE Dates
cur_fdaynum   ds  f
*       FISCAL_DATE Date character format
cur_fdate     ds 0cl8
cur_fyear     ds  cl4
cur_fmth      ds  cl2
cur_fday      ds  cl2
*       FISCAL_DATE Date binary format
cur_bfdate    ds 0f
cur_bfyear    ds  f
cur_bfmth     ds  f
cur_bfday     ds  f
*
*       RUN_DATE Dates
cur_rdaynum   ds  f
*       RUN_DATE Date character format
cur_rdate     ds 0cl8
cur_ryear     ds  cl4
cur_rmth      ds  cl2
cur_rday      ds  cl2
*       RUN_DATE Date binary format
cur_brdate    ds 0f
cur_bryear    ds  f
cur_brmth     ds  f
cur_brday     ds  f
         ds    0d
view_cnt    ds  f
viewtbl_b   ds  f
viewtbl_c   ds  f
*
*      These data areas are used to speed up searches for specific
*      records in the memory version of the VDP. Rather than search
*      all the VDP we separate records together.
*
            ds  0d
First_50    ds  d       1st VDP type 50 record
Curr_50     ds  d       current VDP type 50 record
First_200   ds  d       1st VDP type 200 record
Curr_200    ds  d       current VDP type 200 record
First_210   ds  d       1st VDP type 210 record
Curr_210    ds  d       current VDP type 210 record
First_300   ds  d       1st VDP type 300 record
Curr_300    ds  d       current VDP type 300 record
First_1000  ds  d       1st VDP type 1000 record
Curr_1000   ds  d       current VDP type 1000 record
First_2000  ds  d       1st VDP type 2000 record
Curr_2000   ds  d       current VDP type 2000 record
First_2300  ds  d       1st VDP type 2300 record
Curr_2300   ds  d       current VDP type 2300 record
*
HASH_LU_LIST ds A       First in list of hash table LUs
HASH_LU_CURR ds A       Current in list of hash table LUs
                        EJECT
* HASH LU list entry 
HASH_LU_ENT DSECT
HASH_NEXT  DS  A        NEXT in chain
HASH_LF    DS  F        LFid 
HASH_LR    DS  F        LRid 
HASH_MULT  DS  F        mult factor for hash table, 1-10 
HASH_PACK  DS  C        PACK the reference key before CKSM, Y/N 
           DS  xl3
HASH_LU_LEN EQU *-HASH_LU_ENT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        Exit data area                                               *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* This DSECT maps the exit data area within the LU records.
*  The chain anchor is in GVBMR95W common area EXIT_DATA_PTR - the
*  chain ends with a zero pointer
*
exit_data dsect
exit_next ds    a               Pointer to next exit area in LT
exit_Id   DS    F               exit ID
exit_NAME DS    CL08            exit name
exit_addr DS    A               exit address
exit_entry ds   a               exit entry point address
exit_WORK DS    A               exit pgm workarea anchor
exit_parm DS    CL32            exit START-UP  PARAMETERS
exit_data_len equ *-exit_data
                        EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        D Y N A M I C   A L L O C A T I O N   P A R A M E T E R S    *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         GVBAUR35 DSECT=YES
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        D A T A   C O N T R O L   B L O C K S                        *
*        used by GVBMRBS and GVBMR95                                  *
*                                                                     *
*        (the macro GVBDECB expands to the same as the commented      *
*         out layout)                                                 *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*MAPREAD  dsect
*         READ  READECB,SF,,0,0,MF=L
*         DC    AL4(0)             READ EXIT WORK AREA ADDRESS POINTER
*         DC    CL8' '             READ EXIT FOR  DDNAME
*         DC    A(0)               PIPE "WRITE"   DECB ADDRESS
*MAPREADL EQU  *-MAPREAD
                        SPACE 3
*MAPWRT   dsect
*         WRITE WRITECB,SF,0,0,0,MF=L
*         DC    A(0)               PIPE "READ"    DECB ADDRESS
*MAPWRTL  EQU   *-MAPWRT
mapread   gvbdecb pre=map,dsect=y,type=read,decb=readecb
mapwrt    gvbdecb pre=map,dsect=y,type=write,decb=writecb
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        DATA EVENT CONTROL BLOCK ASSOCIATED WITH AN I/O BUFFER       *
*        used by GVBMRBS and GVBMR95 for READ EVENT file              *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
DECB     DSECT                  BSAM DECB
*
DECBNEXT DS    AL04             DECB PREFIX  (NEXT DECB ADDRESS)
*
DECBBSAM DS    (MAPREADL)C      BSAM READ DECB (+ READ EXIT EXTENSIONS)
*
         ORG   DECBBSAM
DECBECB  DS    XL04             EVENT  CONTROL  BLOCK
DECBTYP1 DS    XL01             FUNCTION  TYPE
DECBTYP2 DS    XL01             FUNCTION  TYPE
DECBSIZE DS    HL02             BUFFER    SIZE (MAXIMUM)
DECBDCB  DS    AL04             DCB    ADDRESS (DUMMY  FILE)
DECBBUFR DS    AL04             BUFFER ADDRESS
DECBIOB  DS    AL04             IOB    ADDRESS
*
DECBWORK DS    A                WORK   AREA     ADDRESS (EXTENSION)
DECBDDN  DS    CL08             PSEUDO FILE     DDNAME  (EXTENSION)
*
         ORG   DECBBSAM+MAPREADL
DECBTHRD DS    A                THREAD WORKAREA ADDRESS
DECBPREV DS    A                PREVIOUS BUFFER AVAILABLE
DECBR13S DS    A                SAVE  READ EXIT R13
*
DECBLEN  EQU   *-DECB
*
                        EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        E Q U A T E S                                                *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
***********************************************************************
* "VDP" RECORD TYPES                                                  *
***********************************************************************
VDPVERS  EQU   13                 4.18 Version of VDP
***********************************************************************
* "VDP" RECORD TYPES                                                  *
***********************************************************************
VDPHEADR EQU   001                "VDP" HEADER      RECORD TYPE CODE
VDPCNTRL EQU   050                "VDP" Control Rec RECORD TYPE CODE
VDPFILEI EQU   200                "VDP" INPUT  FILE RECORD TYPE CODE
VDPFILEP EQU   200                "VDP" PARTITION   RECORD TYPE CODE
VDPEXPGM EQU   210                "VDP" EXIT   PROG RECORD TYPE CODE
VDPLR    EQU   300                "VDP" LOGICAL REC RECORD TYPE CODE
VDPJRFIL EQU   650                "VDP" Join Ref    RECORD TYPE CODE
VDPFILED EQU   800                "VDP" default file rec type code
VDPXTRCT EQU   801                "VDP" Extra file  RECORD TYPE CODE
VDPVIEW  EQU   1000               "VDP" VIEW   DEFN RECORD TYPE CODE
VDPFILEO EQU   1600               "VDP" OUTPUT FILE RECORD TYPE CODE
VDPCOLM  EQU   2000               "VDP" VIEW COLUMN RECORD TYPE CODE
VDPSORT  EQU   2300               "VDP" COLUMN SORT RECORD TYPE CODE
*
***********************************************************************
* "DB2" OPTIONS                                                       *
***********************************************************************
SQLFMT   EQU   001                "SQL" FORMATTED DB2    RECORDS
DB2INTL  EQU   002                "DB2" INTERNAL  FORMAT RECORDS
*
***********************************************************************
* ACCESS METHODS                                                      *
***********************************************************************
SEQFILE  EQU   01                 SEQUENTIAL     FILE
VSAMFILE EQU   02                 VSAM "CI"      FILE
KSDSFILE EQU   03                 VSAM     KSDS  FILE
IMSFASTP EQU   05                 IMS FAST PATH  FILE
DB2SQL   EQU   06                 DB2 -     SQL  FILE
DB2VSAM  EQU   07                 DB2 -    VSAM  FILE
EXCPFILE EQU   08                 EXEC CHAN PGM  FILE
ORACLE   EQU   10                 ORACLE  RDBMS  FILE
SYBASE   EQU   11                 SYBASE  RDBMS  FILE
MSGQUEUE EQU   15                 WEBSPHERE "MQ" QUEUE
*
***********************************************************************
* VIEW TYPES                                                          *
***********************************************************************
SUMVIEW  EQU   01                 SUMMARY  VIEW
DETVIEW  EQU   02                 DETAIL   VIEW
MERGSUM  EQU   03                 MERGE    SUMMARY VIEW "DT"  AREA
COPYVIEW EQU   04                 COPY     VIEW
EXTRONLY EQU   05                 EXTRACT  ONLY    VIEW
*
***********************************************************************
* PHYSICAL FILE TYPES                                                 *
***********************************************************************
STDEXTR  EQU   01                 STANDARD EXTRACT
DISKDEV  EQU   02                 DISK           DEVICE TYPE
TAPEDEV  EQU   03                 TAPE           DEVICE TYPE
PIPEDEV  EQU   04                 PIPE           DEVICE TYPE
TOKENDEV EQU   05                 TOKEN          DEVICE TYPE
*
* these types are not populated in VDP0200B_ALLOC_FILE_TYPE
*
* DATABASE EQU   06                 DATABASE       DEVICE TYPE
* READEXIT EQU   07                 READ EXIT STD  DEVICE TYPE
* RDEXPIPE EQU   08                 READ EXIT PIPE DEVICE TYPE
*
***********************************************************************
* RECORD FORMAT TYPES (RECFM)                                         *
***********************************************************************
RECFMU   EQU   00                 UNDEFINED
RECFMFB  EQU   01                 FIXED BLOCK
RECFMVB  EQU   02                 VAR   BLOCK
RECFMFBA EQU   03                 FIXED BLOCK ANSI CC
RECFMVBA EQU   04                 VAR   BLOCK ANSI CC
*
***********************************************************************
* DATA SET ORGANIZATION (DSORG)                                       *
***********************************************************************
DSORGU   EQU   00                 UNDEFINED
DSORGPS  EQU   01                 PHYSICAL SEQUENTIAL
DSORGDA  EQU   02                 DIRECT ACCESS
DSORGVS  EQU   03                 VSAM
DSORGPO  EQU   04                 PARTITIONED
*
***********************************************************************
* CONTROL RECORD HEADER OPTIONS                                       *
***********************************************************************
NOHDR    EQU   01                 NO     HEADER RECORD
VERHDR   EQU   02                 VERIFY HEADER RECORD
SKIPHDR  EQU   03                 SKIP   HEADER RECORD
*
***********************************************************************
* EXIT PROGRAM TYPES                                                  *
***********************************************************************
COBOLPGM EQU   01                 LE COBOL
ASMPGM   EQU   06                 ASSEMBLER
*
***********************************************************************
* EXIT PARAMETERS                                                     *
***********************************************************************
OPTIMIZE EQU   01                 OPTIMIZE LOOKUPS (EXITS)
*
***********************************************************************
* SORT SEQUENCE                                                       *
***********************************************************************
ASCEND   EQU   01                 SORT    ASCENDING
DESCEND  EQU   02                 SORT    DESCENDING
                        SPACE 3
***********************************************************************
* MACHINE CODE GENERATOR - SUBSTITUTION FUNCTIONS                     *
***********************************************************************
CSSRCLN  EQU   01                 SOURCE  FIELD  LENGTH
CSSRCLNL EQU   02                 SOURCE  FIELD  LENGTH  (LEFT  1/2)
CSSRCLNR EQU   03                 SOURCE  FIELD  LENGTH  (RIGHT 1/2)
*CSSRCOFF EQU   04                 SOURCE  FIELD  OFFSET
*
CSSRCLOF EQU   05                 LONG    SOURCE FIELD   OFFSET
*
CSTGTLN  EQU   06                 TARGET  FIELD  LENGTH
CSTGTLNL EQU   07                 TARGET  FIELD  LENGTH  (LEFT  1/2)
CSTGTLNR EQU   08                 TARGET  FIELD  LENGTH  (RIGHT 1/2)
CSv1len  EQU   09                 Value   1      length
CSV1OFF  EQU   10                 VALUE   1      OFFSET
CSV2OFF  EQU   11                 VALUE   2      OFFSET
*
CSTRUEO  EQU   12                 TRUE    BRANCH DISPLACEMENT(OPTIONAL)
CSTRUEM  EQU   13                 TRUE    BRANCH DISPLACEMENT(MAND)
CSFALSEO EQU   14                 FALSE   BRANCH DISPLACEMENT(OPTIONAL)
CSFALSEM EQU   15                 FALSE   BRANCH DISPLACEMENT(MAND)
*
CSRELOPR EQU   16                 RELATIONAL COMPARISON  CONDITION CODE
CSRELOP2 EQU   17                 RELATIONAL COMPARISON  CONDITION CODE
*
CSLTROFF EQU   18                 LOGIC  TBL ROW ADDRESS OFFSET
CSLBAOFF EQU   19                 LOOK-UP BUFFER ADDRESS OFFSET
CSLBAOF2 EQU   20                 LOOK-UP BUFFER ADDRESS OFFSET  TWO
*
CSCOLNO  EQU   21                 "CT"   COLUMN  NUMBER  OFFSET
*
*CSSRPDEC EQU   22                 SHIFT AND ROUND DECIMAL PLACES
CSSRPCT  EQU   23                 SHIFT AND ROUND "CT" COL DEC   PLACES
*
CSLSTBYT EQU   24                 LAST/RIGHTMOST  TARGET  BYTE   OFFSET
CSBYTMSS EQU   25                 "ICM"  BYTES MOVED MASK (SOURCE)
CSBYTMSK EQU   26                "ICM/STCM" byte mask (target/2nd parm)
*
CSLRID   EQU   27                 LOGICAL RECORD  ID
CSKEYLEN EQU   28                 LOOK-UP         KEY     LENGTH
CSTTLOFF EQU   29                 TITLE   KEY  OFFSET
CSLVLOFF EQU   30                 HIERARCHICAL    LOOK-UP LEVEL
*
CSACCOFF EQU   31                 ACCUMULATOR     ADDRESS OFFSET
CSACCOF2 EQU   32                 ACCUMULATOR  2  ADDRESS
CSACCVAL EQU   33                 ACCUMULATOR     VALUE   OFFSET
CSACCLEN EQU   34                 ACCUMULATOR     LENGTH
*
CSTRTTBL EQU   35                 NUMERIC   CLASS TEST    "TRT" TABLE
CSSUBCTR EQU   36                 SUBSTRING LOOP  COUNTER
CSSUBLEN EQU   37                 SUBSTRING LENGTH
CSSUBOFF EQU   38                 SUBSTRING STARTING OFFSET
CSSUBVAL EQU   39                 SUBSTRING VALUE    OFFSET
*
CSSDNLN  EQU   40                 SORT  DESCENDING LEN    (TARGET)
CSsubctrcx EQU 41                 substr counter for SFCx
CSSRTLEN EQU   42                 SORT  KEY LENGTH
*
CSsubctrxc EQU 43                 substr counter for SFxC
CSCALLVW EQU   44                 CALL VIEW MACHINE CODE
*
*CSJUSLEN EQU   45                 JUSTIFIED TARGET FIELD LENGTH
CSJUSOFF EQU   46                 JUSTIFIED TARGET FIELD OFFSET
CSCTACUM EQU   47                 "CT"   COLUMN  NUMBER  OFFSET (RT=9)
*CSLSTSRC EQU   48                 LAST/RIGHTMOST SOURCE  BYTE   OFFSET
CSSRPSRC EQU   49                 SHIFT AND ROUND DECIMAL PLACES
*
CSSDNSLN EQU   50                 SORT  DESCENDING LEN    SOURCE
*CSSDNSOF EQU   51                 SORT  DESCENDING OFFSET SOURCE
*
CSTGTLOF EQU   52                 LONG  TARGET     FIELD  OFFSET
*
CSLKPSTK EQU   53                 LOOK-UP  STACK   OFFSET
*
CSSFTDIG EQU   54                 SET "SHIFTDIG"
*
CSCTACUM_12 EQU 55                "CT"   COL NUMBER OFFSET (RT=12) @01I
*
CSdl96call  EQU 56                BAS to Calldl96 depending on source
CSdl96callr EQU 57                BAS to Calldl96 with revesed fields
CSdl96calln EQU 58                BAS to Calldl96 with normal
*cssrpaln EQU   59                 Used to work out the difference
*                                 in the number numerics after the dec
*                                 point in a field and a column.
csdfpexp EQU   60                 Calculate DFP exponent
csdfpopt EQU   61                 Optimise FP0/fp2 loads
csdfpexps EQU   62                Calculate DFP exponent source
*
CSV1OFFR EQU   63                 VALUE   1      OFFSET
CSV2OFFR EQU   64                 VALUE   2      OFFSET
CSTGTLOFR EQU   65                 LONG  TARGET     FIELD  OFFSET
CSSRCLOFR EQU   66                 LONG    SOURCE FIELD   OFFSET
*
CSdl96calln_r EQU 67             BAS to Calldl96 with normal - use op1
CSSRCHR       EQU 68             Address of the lookup search routine
CScmpdt1      EQU 69              Set the compare for CFxC with dates
CScmpdt2      EQU 70              Set the compare for CFCx with dates
CSTGTLNE      EQU 71              Target length - long field (>256)
CSSRCLNE      EQU 72              Source length - long field
CSLOOPC       EQU 73              loop counter for fields > 256
CSSRCRM       EQU 74              Source long field remainder length
csmaxval equ   CSSRCRM           This MUST be set to the maximum of the+
                   EQUates above - branch tables dependencies in 95/96
*
***********************************************************************
*  OUTPUT MEDIA                                                       *
***********************************************************************
BATCH    EQU   01                       BATCH/HARDCOPY
ONLINE   EQU   02                       ONLINE     VIEW
FILEFMT  EQU   03                       FILE       FORMAT
EXECINF  EQU   04                       EXECUTIVE  INFORMATION
EXCEL    EQU   05                       EXCEL
LOTUS123 EQU   06                       LOTUS 123
CSV      EQU   07                       COMMA SEPARATED VARIABLES
PVITTBL  EQU   08                       EXCEL PIVOT     TABLE
XML      EQU   09                       XML
*
***********************************************************************
*  COLUMN SUBTOTAL OPTIONS ("CDSUBOPT") *
***********************************************************************
NOSUBTOT EQU   01  (N)                  NO  COLUMN SUBTOTALING
SUBTOT   EQU   02  (Y)                  SUBTOTAL   COLUMN
MAX      EQU   03  (H)                  MAXIMUM    COLUMN VALUE (HIGH)
MIN      EQU   04  (L)                  MINIMUM    COLUMN VALUE (LOW )
FIRST    EQU   05  (B)                  FIRST      COLUMN VALUE (BEG )
LAST     EQU   06  (E)                  LAST       COLUMN VALUE (END )
DETCALC  EQU   07  (D)                  CALCULATIONS  AT DETAIL LEVEL
BRKCALC  EQU   08  (C)                  CALCULATIONS  AT  BREAK LEVEL
RECALC   EQU   09  (R)                  CALCULATIONS  AT  BOTH  LEVELS
DETMAX   EQU   10  (X)                  DETAIL LEVEL  MAXIMUM   VALUE
DETMIN   EQU   11  (M)                  DETAIL LEVEL  MINIMUM   VALUE
*
***********************************************************************
* MISCELLANEOUS PARAMETERS                                            *
***********************************************************************
MINLTBL  EQU   6                  MINIMUM NO. OF  LOGIC TABLE ROWS
MAXBUFR  EQU   20                 MAXIMUM NO. OF  READ/WRITE  BUFFERS
PIPEBUFR EQU   3                  NO.  OF PIPE    BUFFERS
ENDRANGE EQU   2                  EFFECTIVE  END  DATES  PRESENT
ENDONLY  EQU   3                  EFFECTIVE  END  DATES  ONLY
VDPCUSHN EQU   4096              MIN NEEDED IN MR96 FOR ANOTHER VDP ROW
LTCUSH   EQU   200                MINIMUM NEEDED  FOR ANOTHER "LT"  ROW
CODECUSH EQU   20480              CODE    BUFFER  ESTIMATE     CUSHION
BLKSIZE  EQU   27998              DEFAULT EXTRACT FILE  BLOCK  SIZE
MAXBLKSI EQU   32760              MAXIMUM BLOCK   SIZE
STACKSIZ EQU   100                LOOK-UP STACK   SIZE (ENTRIES)
MINEXTF# EQU   100                MINIMUM NO. OF EXTRACT FILE TABLE ENT
